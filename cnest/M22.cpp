#include "CBiRd.h"

/* Computes the Gamma function using the Lanczos approximation */
static dcomplex MyGamma(dcomplex z) {
    /* Lanczos coefficients for g = 7 */
    static double p[] = {
        0.99999999999980993227684700473478,
        676.520368121885098567009190444019,
       -1259.13921672240287047156078755283,
        771.3234287776530788486528258894,
       -176.61502916214059906584551354,
        12.507343278686904814458936853,
       -0.13857109526572011689554707,
        9.984369578019570859563e-6,
        1.50563273514931155834e-7
    };

    if(z.real() < 0.5)
        return M_PI / (sin(M_PI*z)*MyGamma(1. - z));

    z -= 1;
    dcomplex x = p[0];
    for(int n = 1; n < 9; n++)
        x += p[n] / (z + double(n));
    dcomplex t = z + 7.5;
    return sqrt(2*M_PI) * pow(t, z+0.5) * exp(-t) * x;
}

dcomplex I(const dcomplex & n1, const dcomplex & n2) {
	return MyGamma(1.5-n1)* MyGamma(1.5-n2) * MyGamma(-1.5+n1+n2) / ( 8.*pow(M_PI,1.5) * MyGamma(n1) * MyGamma(3.-n1-n2) * MyGamma(n2) ) ;
}

dcomplex M22 (const unsigned int & j, const dcomplex & n1, const dcomplex & n2, const dcomplex & In1n2, const double & f1) {

	switch(j) {
		case 0:
			return In1n2 * ( (f1*(-3. + 2.*n1 + 2.*n2)*pow(n1,-1)*pow(1. + n1,-1)*pow(-1. + 2.*n1,-1)*pow(n2,-1)*((4.*(1. + 2.*n1)*(3. + 2.*(-2. + n1)*n1*(1. + n1)) + f1*(5. - 2.*n1*(1. + 2.*n1)))*n2 + (8. - 4.*n1 + f1*(2. + n1*(-3. + 2.*n1)))*(-1. + n1 + 2.*pow(n1,2)) - (-12. + f1 + 4.*(10. + f1)*n1 + 8.*(2. + f1)*pow(n1,2) - 16.*pow(n1,3))*pow(n2,2) - 4.*(2. + f1 + 2.*n1 - 4.*pow(n1,2))*pow(n2,3) + 4.*(f1 + 4.*n1)*pow(n2,4))*pow(1. + n2,-1)*pow(-1. + 2.*n2,-1))/8. ) ;
			break ; 
		case 1:
			return In1n2 * ( (f1*(-3. + 2.*n1 + 2.*n2)*pow(n1,-1)*(2. + n2*(4. + 5.*n2) + n1*(4. + n2*(10. + 7.*n2)) + (5. + 7.*n2)*pow(n1,2))*pow(1. + n1,-1)*pow(n2,-1)*pow(1. + n2,-1))/7. ) ;
			break ; 
		case 2:
			return In1n2 * ( f1*(n1 + n2)*(-3. + 2.*n1 + 2.*n2)*pow(n1,-1)*pow(n2,-1) ) ;
			break ; 
		case 3:
			return In1n2 * ( ((1. + n1 + n2)*(2. + n1 + n2)*(-3. + 2.*n1 + 2.*n2)*(-1. + 2.*n1 + 2.*n2)*pow(f1,2)*pow(n1,-1)*pow(1. + n1,-1)*pow(n2,-1)*pow(1. + n2,-1))/8. ) ;
			break ; 
		case 4:
			return In1n2 * ( (pow(n1,-1)*pow(1. + n1,-1)*pow(-1. + 2.*n1,-1)*pow(n2,-1)*(6. - 7.*n2 + 2.*n1*(-3. + n1*(19. + n1*(-5. + 4.*(-3. + n1)*n1)))*n2 + n1*(1. + 2.*n1)*(-7. + n1 + 2.*pow(n1,2)) + (-13. + 2.*n1*(19. + 6.*n1 - 4.*pow(n1,2)))*pow(n2,2) + 2.*(2. + n1*(-5. - 4.*n1 + 8.*pow(n1,2)))*pow(n2,3) + 4.*(1. - 6.*n1)*pow(n2,4) + 8.*n1*pow(n2,5))*pow(1. + n2,-1)*pow(-1. + 2.*n2,-1))/4. ) ;
			break ; 
		case 5:
			return In1n2 * ( (pow(n1,-1)*((-3. + 2.*n2)*(6. + n2*(8. + 5.*n2)) + n1*(-12. + n2*(-38. + n2*(-11. + 14.*n2))) + (1. - 11.*n2)*pow(n1,2) + 2.*(5. + 7.*n2)*pow(n1,3))*pow(1. + n1,-1)*pow(n2,-1)*pow(1. + n2,-1))/7. ) ;
			break ; 
		case 6:
			return In1n2 * ( (n1*(-3. + 2.*n1) + n2*(-3. + 2.*n2))*pow(n1,-1)*pow(n2,-1) ) ;
			break ; 
		case 7:
			return In1n2 * ( (2.*pow(n1,-1)*pow(1. + n1,-1)*pow(n2,-1)*(48. - 2.*n1*(1. + 10.*n1) - 2.*n2 + 3.*n1*(17. + 7.*n1)*n2 + (-20. + 7.*n1*(3. + 7.*n1))*pow(n2,2))*pow(1. + n2,-1))/49. ) ;
			break ; 
		case 8:
			return In1n2 * ( (4.*(3. - 2.*n2 + n1*(-2. + 7.*n2))*pow(n1,-1)*pow(n2,-1))/7. ) ;
			break ; 
		case 9:
			return In1n2 * ( 2. ) ;
			break ; 
		case 10:
			return In1n2 * ( (f1*(-3. + 2.*n1 + 2.*n2)*pow(n1,-1)*pow(1. + n1,-1)*pow(-1. + 2.*n1,-1)*pow(n2,-1)*(-7.*f1*(-1. + 2.*n1)*(-1. + 2.*n2)*(n1*(-1. + 2.*n1) + (-2. + n2)*(3. + 2.*n2)) + 4.*((-2. + n2)*(5. + n2)*(-1. + 2.*n2) + n1*(-23. + 2.*n2*(47. + n2*(-19. + n2*(-23. + 14.*n2)))) + (5. + 2.*n2*(-19. + 14.*(-1. + n2)*n2))*pow(n1,2) + 28.*n2*pow(n1,4) + pow(n1,3)*(2. - 46.*n2 + 28.*pow(n2,2))))*pow(1. + n2,-1)*pow(-1. + 2.*n2,-1))/56. ) ;
			break ; 
		case 11:
			return In1n2 * ( ((-3. + 2.*n1 + 2.*n2)*(-1. + 2.*n1 + 2.*n2)*pow(f1,2)*pow(n1,-1)*pow(1. + n1,-1)*pow(-1. + 2.*n1,-1)*pow(n2,-1)*(38. + (41. - 66.*n2)*n2 + n1*(41. + 4.*n2*(-58. + n2*(-9. + 28.*n2))) + 2.*(-33. + 2.*n2*(-9. + 28.*n2))*pow(n1,2) + 112.*n2*pow(n1,3) + 7.*f1*(2. + n1 + n2 - 8.*n1*(1. + n1)*n2 + 4.*pow(n1,3) - 8.*n1*pow(n2,2) + 4.*pow(n2,3)))*pow(1. + n2,-1)*pow(-1. + 2.*n2,-1))/56. ) ;
			break ; 
		case 12:
			return In1n2 * ( ((2. + n1 + n2)*(-3. + 2.*n1 + 2.*n2)*(-1. + 2.*n1 + 2.*n2)*(1. + 2.*n1 + 2.*n2)*pow(f1,3)*pow(n1,-1)*pow(1. + n1,-1)*pow(n2,-1)*pow(1. + n2,-1))/8. ) ;
			break ; 
		case 13:
			return In1n2 * ( -(f1*(-3. + 2.*n1 + 2.*n2)*pow(n1,-1)*(7.*f1*(9. + 3.*n1 + 3.*n2 + 7.*n1*n2) - 2.*(-58. + n2*(4. + 35.*n2) + n1*(4. + 7.*n2*(2. + 7.*n2)) + 7.*(5. + 7.*n2)*pow(n1,2)))*pow(1. + n1,-1)*pow(n2,-1)*pow(1. + n2,-1))/98. ) ;
			break ; 
		case 14:
			return In1n2 * ( ((-3. + 2.*n1 + 2.*n2)*(-1. + 2.*n1 + 2.*n2)*(5. + 5.*n1 + 5.*n2 + 7.*n1*n2)*pow(f1,2)*pow(n1,-1)*pow(1. + n1,-1)*pow(n2,-1)*pow(1. + n2,-1))/14. ) ;
			break ; 
		case 15:
			return In1n2 * ( -(f1*(-3. + 2.*n1 + 2.*n2)*(7.*f1 - 2.*(-8. + 7.*n1 + 7.*n2))*pow(n1,-1)*pow(n2,-1))/14. ) ;
			break ; 
		case 16:
			return In1n2 * ( ((-3. + 2.*n1 + 2.*n2)*(-1. + 2.*n1 + 2.*n2)*pow(f1,2)*pow(n1,-1)*pow(n2,-1))/2. ) ;
			break ; 
		case 17:
			return In1n2 * ( ((-3. + 2.*n1 + 2.*n2)*(-1. + 2.*n1 + 2.*n2)*pow(f1,2)*pow(n1,-1)*(-28.*f1*(-1. + 2.*n1)*(-1. + 2.*n2)*(-2. + 7.*n1 + 7.*n2) + 147.*(-1. + 2.*n1)*(-1. + 2.*n2)*pow(f1,2) + 8.*(50. - n2*(9. + 35.*n2) + n1*(-9. + 2.*n2*(-33. + 7.*n2*(-9. + 7.*n2))) + 7.*(-5. + 2.*n2*(-9. + 14.*n2))*pow(n1,2) + 98.*n2*pow(n1,3)))*pow(1. + n1,-1)*pow(-1. + 2.*n1,-1)*pow(n2,-1)*pow(1. + n2,-1)*pow(-1. + 2.*n2,-1))/1568. ) ;
			break ; 
		case 18:
			return In1n2 * ( ((-3. + 2.*n1 + 2.*n2)*(-1. + 2.*n1 + 2.*n2)*pow(f1,3)*pow(n1,-1)*pow(1. + n1,-1)*pow(-1. + 2.*n1,-1)*pow(n2,-1)*(2.*(26. + (9. - 38.*n2)*n2 + n1*(9. + 4.*n2*(-21. + n2*(-9. + 14.*n2))) + 2.*(-19. + 2.*n2*(-9. + 28.*n2))*pow(n1,2) + 56.*n2*pow(n1,3)) + 7.*f1*(1. + 2.*n1 + 2.*n2)*(1. + 2.*(-4.*n1*n2 + pow(n1,2) + pow(n2,2))))*pow(1. + n2,-1)*pow(-1. + 2.*n2,-1))/112. ) ;
			break ; 
		case 19:
			return In1n2 * ( ((-3. + 2.*n1 + 2.*n2)*(-1. + 2.*n1 + 2.*n2)*(1. + 2.*n1 + 2.*n2)*(3. + 2.*n1 + 2.*n2)*pow(f1,4)*pow(n1,-1)*pow(1. + n1,-1)*pow(n2,-1)*pow(1. + n2,-1))/32. ) ;
			break ; 
	}
}

